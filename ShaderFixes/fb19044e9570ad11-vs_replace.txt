// Shadows Halo

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_InstanceVS_CB : register(b1)
{
	struct
	{
		row_major float4x4 vs_world;
	} g_InstanceVS : packoffset(c0);
}

cbuffer g_MiscGroup2VS_Infrequent_CB : register(b2)
{
	struct
	{
		float4 vs_wind_params;
		float4 vs_screenSize;
		float4 vs_viewportScaleBias;
		float4 vs_halfPixelOffset;
		float4 vs_screenDoorScaleBias;
	} g_MiscGroup2VS_Infrequent : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : POSITION0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float4 o3 : TEXCOORD2)
{
	float4 r0,r1;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xyzw = g_InstanceVS.vs_world._m10_m11_m12_m13 * v0.yyyy;
	r0.xyzw = v0.xxxx * g_InstanceVS.vs_world._m00_m01_m02_m03 + r0.xyzw;
	r0.xyzw = v0.zzzz * g_InstanceVS.vs_world._m20_m21_m22_m23 + r0.xyzw;
	r0.xyzw = v0.wwww * g_InstanceVS.vs_world._m30_m31_m32_m33 + r0.xyzw;
	r1.xyzw = g_CameraVS.vs_viewProj._m10_m11_m12_m13 * r0.yyyy;
	r1.xyzw = r0.xxxx * g_CameraVS.vs_viewProj._m00_m01_m02_m03 + r1.xyzw;
	r1.xyzw = r0.zzzz * g_CameraVS.vs_viewProj._m20_m21_m22_m23 + r1.xyzw;
	r0.xyzw = r0.wwww * g_CameraVS.vs_viewProj._m30_m31_m32_m33 + r1.xyzw;
	o0.xyzw = r0.xyzw;
	
	float4 stereo = StereoParams.Load(0);
	r0.x += stereo.x * (r0.w - stereo.y);
	
	r1.xyz = float3(0.5,-0.5,0.5) * r0.xyw;
	r1.xy = r1.xy + r1.zz;
	r1.zw = g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.xy * r0.ww;
	o1.xy = r1.xy * g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.zw + r1.zw;
	r1.xyzw = g_CameraVS.vs_inverse_projection_xy.xyzw * r0.xyww;
	o2.z = r0.w;
	o1.zw = r1.xy + r1.zw;
	o2.xy = g_CameraVS.vs_projection_params.xw;
	o2.w = g_CameraVS.vs_inverse_projection2.x;
	o3.xyzw = g_MiscGroup2VS_Infrequent.vs_screenSize.xyzw;
	return;
}
