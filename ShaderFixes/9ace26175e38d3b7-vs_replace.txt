// HUD: red rectangle + ingame HUD + Lensflares - Need texture separation

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_MaterialVS_CB : register(b1)
{
	struct
	{
		float4 vs_layer0_diffuse;
		float4 vs_bitangentFlip;
		float4 vs_misc_params;
		float4 vs_vtf_kOffset_kHeight;
		float4 vs_ambientColor;
		float4 vs_fxAttributes;
		float4 vs_vtf_direction;
		float4 vs_UVMatrix01[4];
		float4 vs_UVMatrix23[4];
		float4 vs_bias;
	} g_MaterialVS : packoffset(c0);
}

cbuffer g_InstanceVS_CB : register(b2)
{
	struct
	{
		row_major float4x4 vs_world;
	} g_InstanceVS : packoffset(c0);
}

cbuffer g_MiscGroup1VS_Frequent_CB : register(b3)
{
	struct
	{
		float4 vs_lightmapOffset;
		float4 vs_kTint;
		float4 vs_defunct;
		float4 vs_fastBlendWeights;
	} g_MiscGroup1VS_Frequent : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : POSITION0,
	float4 v1 : NORMAL0,
	float4 v2 : COLOR0,
	float2 v3 : TEXCOORD0,
	out float4 o0 : SV_Position0,
	out float4 o1 : COLOR0,
	out float4 o2 : TEXCOORD0)
{
	float4 r0,r1;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xyzw = mul(v0,g_InstanceVS.vs_world);
	o0.xyzw = mul(r0,g_CameraVS.vs_viewProj);
	
	float4 stereo = StereoParams.Load(0);
	float4 iniParams = IniParams.Load(0);
	float4 tex_filter = IniParams.Load(int2(2,0));
	
	if (!tex_filter.y) {
		if (tex_filter.x == 2)
			o0.x -= stereo.x * (o0.w - stereo.y) * iniParams.x;
		else if (tex_filter.x == 4) // Light Flares
			o0.x += stereo.x * (o0.w - stereo.y) * 1.75;
		else if (tex_filter.x == 3)
			o0.x -= stereo.x * (o0.w - stereo.y) * (2.75 * stereo.y - 5.025); // Lens flares
		else
			o0.x -= stereo.x;
	}
	
	r0.xyz = v2.xyz;
	r0.w = v1.w;
	o1.xyzw = g_MiscGroup1VS_Frequent.vs_kTint.xyzw * r0.xyzw;
	o2.zw = float2(0,0);
	r0.xy = v3.xy;
	r0.z = 1;
	o2.x = dot(r0.xyz, g_MaterialVS.vs_UVMatrix01[0].xyw);
	o2.y = dot(r0.xyz, g_MaterialVS.vs_UVMatrix01[1].xyw);
	return;
}
