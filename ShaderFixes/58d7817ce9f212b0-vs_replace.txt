// Level Collectibles Mission Round Tiles

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_FogTexVS_CB : register(b1)
{
	struct
	{
		float4 vs_fog_tex_params;
	} g_FogTexVS : packoffset(c0);
}

cbuffer g_InstanceVS_CB : register(b2)
{
	struct
	{
		row_major float4x4 vs_world;
	} g_InstanceVS : packoffset(c0);
}

cbuffer g_MiscGroup1VS_Frequent_CB : register(b3)
{
	struct
	{
		float4 vs_lightmapOffset;
		float4 vs_kTint;
		float4 vs_defunct;
		float4 vs_fastBlendWeights;
	} g_MiscGroup1VS_Frequent : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main(
	float4 v0 : POSITION0,
	float4 v1 : NORMAL0,
	float4 v2 : COLOR0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float2 o3 : TEXCOORD2,
	out float4 o4 : COLOR0)
{
	float4 r0,r1,r2;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xyzw = mul(v0,g_InstanceVS.vs_world);
	o0.xyzw = mul(r0,g_CameraVS.vs_viewProj);
	
	float4 tex_filter = IniParams.Load(int2(2,0));	
	if (tex_filter.y)
	{
		float4 stereo = StereoParams.Load(0);
		o0.x -= stereo.x * (o0.w - stereo.y);
		o0.x += stereo.x * (o0.w - 1);
	}
	
	r1.xyz = g_CameraVS.vs_view._m10_m11_m12 * r0.yyy;
	r1.xyz = r0.xxx * g_CameraVS.vs_view._m00_m01_m02 + r1.xyz;
	r1.xyz = r0.zzz * g_CameraVS.vs_view._m20_m21_m22 + r1.xyz;
	o1.xyz = g_CameraVS.vs_view._m30_m31_m32 + r1.xyz;
	r0.xzw = -g_CameraVS.vs_worldCamPos.xyz + r0.xyz;
	r0.y = saturate(-r0.y * g_FogTexVS.vs_fog_tex_params.x + 1);
	r1.x = dot(r0.xzw, r0.xzw);
	r1.y = sqrt(r1.x);
	r1.x = rsqrt(r1.x);
	r0.xw = r1.xx * r0.xw;
	r0.z = g_FogTexVS.vs_fog_tex_params.z + r0.z;
	r0.z = log2(r0.z);
	r2.x = saturate(r0.z * g_FogTexVS.vs_fog_tex_params.w + g_FogTexVS.vs_fog_tex_params.y);
	r0.xy = r0.xw * r0.yy;
	r2.yz = r0.xy * float2(0.5,0.5) + float2(0.5,0.5);
	r0.x = 1 + r1.y;
	r0.x = log2(r0.x);
	r0.x = 0.0752566829 * r0.x;
	o1.w = min(1, r0.x);
	o2.w = r2.z;
	o3.xy = r2.xy;
	r0.xyz = v1.xyz * float3(2.00787401,2.00787401,2.00787401) + float3(-1,-1,-1);
	r1.xyz = g_InstanceVS.vs_world._m10_m11_m12 * r0.yyy;
	r0.xyw = r0.xxx * g_InstanceVS.vs_world._m00_m01_m02 + r1.xyz;
	r0.xyz = r0.zzz * g_InstanceVS.vs_world._m20_m21_m22 + r0.xyw;
	r1.xyz = g_CameraVS.vs_view._m10_m11_m12 * r0.yyy;
	r0.xyw = r0.xxx * g_CameraVS.vs_view._m00_m01_m02 + r1.xyz;
	r0.xyz = r0.zzz * g_CameraVS.vs_view._m20_m21_m22 + r0.xyw;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = rsqrt(r0.w);
	o2.xyz = r0.xyz * r0.www;
	o4.xyz = saturate(g_MiscGroup1VS_Frequent.vs_kTint.xyz * v2.xyz);
	o4.w = g_MiscGroup1VS_Frequent.vs_kTint.w * v1.w;
	return;
}
