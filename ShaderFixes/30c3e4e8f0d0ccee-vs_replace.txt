// Main VS Shadows

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_MiscGroup2VS_Infrequent_CB : register(b1)
{
	struct
	{
		float4 vs_wind_params;
		float4 vs_screenSize;
		float4 vs_viewportScaleBias;
		float4 vs_halfPixelOffset;
		float4 vs_screenDoorScaleBias;
	} g_MiscGroup2VS_Infrequent : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : POSITION0,
	float2 v1 : TEXCOORD0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float4 o3 : TEXCOORD2)
{
	float4 r0;
	uint4 bitmask, uiDest;
	float4 fDest;

	o0.xy = v0.xy;
	o0.zw = float2(0.999000013,1);
	r0.xy = float2(-0.5,-0.5) + v1.xy;
	r0.xy = g_CameraVS.vs_inverse_projection_xy.xy * r0.xy;
	o1.zw = r0.xy * float2(2,-2) + g_CameraVS.vs_inverse_projection_xy.zw;
	o1.xy = v1.xy * g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.zw + g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.xy;
	o2.xy = g_CameraVS.vs_projection_params.xw;
	o2.z = 1;
	o2.w = g_CameraVS.vs_inverse_projection2.x;
	o3.xyzw = g_MiscGroup2VS_Infrequent.vs_screenSize.xyzw;
	return;
}