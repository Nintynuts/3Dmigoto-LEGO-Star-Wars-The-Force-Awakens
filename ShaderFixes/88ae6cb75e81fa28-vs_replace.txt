// 2D Sky

cbuffer g_SkyObjectVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 rotation;
		float4 scale;
	} g_SkyObjectVS : packoffset(c0);
}

cbuffer g_SkyObjectCommonVS_CB : register(b1)
{
	struct
	{
		row_major float4x4 modelViewProjection;
		float4 planetariumParams;
		float4 sunAngles;
		float4 A;
		float4 B;
		float4 C;
		float4 D;
		float4 E;
		float4 F;
		float4 G;
		float4 H;
		float4 I;
		float4 meanLuminanceSRGB;
		float4 s;
		float4 pows;
		float4 inv_pows_minus_powe;
	} g_SkyObjectCommonVS : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : POSITION0,
	float2 v1 : TEXCOORD0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float4 o3 : TEXCOORD2)
{
	float4 r0,r1,r2;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xy = v0.yx * g_SkyObjectVS.scale.yx + float2(0.5,0.5);
	r0.xy = float2(3.14159274,3.14159274) * r0.xy;
	sincos(r0.xy, r0.xy, r1.xy);
	r0.z = r1.y * -r0.x;
	r1.xyz = g_SkyObjectVS.rotation._m10_m11_m12 * -r1.xxx;
	r0.x = r0.x * r0.y;
	r0.yzw = r0.zzz * g_SkyObjectVS.rotation._m00_m01_m02 + r1.xyz;
	r0.xyz = r0.xxx * g_SkyObjectVS.rotation._m20_m21_m22 + r0.yzw;
	r1.xyzw = g_SkyObjectCommonVS.modelViewProjection._m10_m11_m13_m13 * r0.yyyy;
	r1.xyzw = r0.xxxx * g_SkyObjectCommonVS.modelViewProjection._m00_m01_m03_m03 + r1.xyzw;
	o0.xyzw = r0.zzzz * g_SkyObjectCommonVS.modelViewProjection._m20_m21_m23_m23 + r1.xyzw;
	
	float4 stereo = StereoParams.Load(0);
	o0.x += stereo.x * stereo.y;
	
	o1.xy = v1.xy;
	o1.zw = float2(0,0);
	r0.w = dot(r0.xz, g_SkyObjectCommonVS.sunAngles.zw);
	r1.x = max(0.00999999978, r0.y);
	o3.xyz = r0.xyz;
	r0.x = -r1.x * r1.x + 1;
	r0.x = sqrt(r0.x);
	r0.x = g_SkyObjectCommonVS.sunAngles.x * r0.x;
	r0.y = g_SkyObjectCommonVS.sunAngles.y * r1.x;
	r0.x = r0.x * r0.w + r0.y;
	r0.y = 1 + -r0.x;
	r0.y = sqrt(r0.y);
	r0.z = -r0.x * 0.155972004 + 1.56466997;
	r0.y = r0.y * r0.z;
	r0.yzw = g_SkyObjectCommonVS.E.xyz * r0.yyy;
	r0.yzw = float3(1.44269502,1.44269502,1.44269502) * r0.yzw;
	r0.yzw = exp2(r0.yzw);
	r0.yzw = g_SkyObjectCommonVS.D.xyz * r0.yzw + g_SkyObjectCommonVS.C.xyz;
	r1.y = r0.x * r0.x;
	r0.yzw = g_SkyObjectCommonVS.F.xyz * r1.yyy + r0.yzw;
	r1.yzw = g_SkyObjectCommonVS.H.xyz * r0.xxx;
	r0.x = r0.x * r0.x + 1;
	r2.xyz = g_SkyObjectCommonVS.H.xyz * g_SkyObjectCommonVS.H.xyz + float3(1,1,1);
	r1.yzw = -r1.yzw * float3(2,2,2) + r2.xyz;
	r2.xyz = sqrt(abs(r1.yzw));
	r1.yzw = r2.xyz * abs(r1.yzw);
	r1.yzw = r0.xxx / r1.yzw;
	r0.xyz = g_SkyObjectCommonVS.G.xyz * r1.yzw + r0.yzw;
	r0.w = sqrt(r1.x);
	r1.x = 0.00999999978 + r1.x;
	r1.xyz = g_SkyObjectCommonVS.B.xyz / r1.xxx;
	r1.xyz = float3(1.44269502,1.44269502,1.44269502) * r1.xyz;
	r1.xyz = exp2(r1.xyz);
	r1.xyz = g_SkyObjectCommonVS.A.xyz * r1.xyz + float3(1,1,1);
	r0.xyz = g_SkyObjectCommonVS.I.xyz * r0.www + r0.xyz;
	r0.xyz = r1.xyz * r0.xyz;
	r0.xyz = g_SkyObjectCommonVS.meanLuminanceSRGB.xyz * r0.xyz;
	r0.xyz = max(float3(0,0,0), r0.xyz);
	r1.xyz = max(g_SkyObjectCommonVS.s.xyz, r0.xyz);
	r0.xyz = r0.xyz * r0.xyz;
	r1.xyz = sqrt(r1.xyz);
	r1.xyz = g_SkyObjectCommonVS.pows.xyz + -r1.xyz;
	r1.xyz = g_SkyObjectCommonVS.inv_pows_minus_powe.xyz * r1.xyz;
	r1.xyz = r1.xyz * r1.xyz;
	r0.w = cmp(0 < g_SkyObjectCommonVS.inv_pows_minus_powe.w);
	o2.xyz = r0.www ? r1.xyz : r0.xyz;
	o2.w = 0;
	o3.w = 0;
	return;
}
