// ---- Created with 3Dmigoto v1.2.39 on Fri Jul 01 18:52:22 2016

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_FogTexVS_CB : register(b1)
{
	struct
	{
		float4 vs_fog_tex_params;
	} g_FogTexVS : packoffset(c0);
}

cbuffer g_MiscGroup1VS_Frequent_CB : register(b2)
{
	struct
	{
		float4 vs_lightmapOffset;
		float4 vs_kTint;
		float4 vs_defunct;
		float4 vs_fastBlendWeights;
	} g_MiscGroup1VS_Frequent : packoffset(c0);
}

cbuffer g_MiscGroup2VS_Infrequent_CB : register(b3)
{
	struct
	{
		float4 vs_wind_params;
		float4 vs_screenSize;
		float4 vs_viewportScaleBias;
		float4 vs_halfPixelOffset;
		float4 vs_screenDoorScaleBias;
	} g_MiscGroup2VS_Infrequent : packoffset(c0);
}

cbuffer g_DebrisFadePlaneVS_CB : register(b4)
{
	struct
	{
		float4 plane;
	} g_DebrisFadePlaneVS : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : POSITION0,
	float3 v1 : TEXCOORD0,
	float4 v2 : COLOR0,
	float3 v3 : TEXCOORD1,
	out float4 o0 : SV_Position0,
	out float4 o1 : COLOR0,
	out float4 o2 : TEXCOORD0,
	out float4 o3 : COLOR1,
	out float4 o4 : TEXCOORD1,
	out float4 o5 : TEXCOORD2,
	out float4 o6 : TEXCOORD3)
{
	float4 r0,r1,r2;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xyzw = g_CameraVS.vs_viewProj._m10_m11_m12_m13 * v0.yyyy;
	r0.xyzw = v0.xxxx * g_CameraVS.vs_viewProj._m00_m01_m02_m03 + r0.xyzw;
	r0.xyzw = v0.zzzz * g_CameraVS.vs_viewProj._m20_m21_m22_m23 + r0.xyzw;
	r0.xyzw = v0.wwww * g_CameraVS.vs_viewProj._m30_m31_m32_m33 + r0.xyzw;
	o0.xyzw = r0.xyzw;
	
	float4 stereo = StereoParams.Load(0);
	r0.x += stereo.x * (r0.w - stereo.y);
	
	o1.xyzw = g_MiscGroup1VS_Frequent.vs_kTint.xyzw * v2.xyzw;
	o2.xy = v1.xy;
	o2.zw = g_CameraVS.vs_projection_params.xw;
	r1.x = saturate(-v0.y * g_FogTexVS.vs_fog_tex_params.x + 1);
	r1.yzw = -g_CameraVS.vs_worldCamPos.xyz + v0.xyz;
	r2.x = dot(r1.yzw, r1.yzw);
	r2.y = rsqrt(r2.x);
	r2.x = sqrt(r2.x);
	r2.x = 1 + r2.x;
	r2.x = log2(r2.x);
	r2.x = 0.0752566829 * r2.x;
	o3.y = min(1, r2.x);
	r1.yw = r2.yy * r1.yw;
	r1.z = g_FogTexVS.vs_fog_tex_params.z + r1.z;
	r1.z = max(1, r1.z);
	r1.z = log2(r1.z);
	o3.x = saturate(r1.z * g_FogTexVS.vs_fog_tex_params.w + g_FogTexVS.vs_fog_tex_params.y);
	r1.xy = r1.yw * r1.xx;
	o3.zw = r1.xy * float2(0.5,0.5) + float2(0.5,0.5);
	r0.xy = r0.xy / r0.ww;
	r0.xy = r0.xy * float2(0.5,-0.5) + float2(0.5,0.5);
	r0.xy = r0.xy * g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.zw + g_MiscGroup2VS_Infrequent.vs_viewportScaleBias.xy;
	o4.xy = r0.xy;
	o6.xyzw = r0.xyzw;
	o4.z = v1.z;
	o4.w = 0;
	o5.xyzw = g_DebrisFadePlaneVS.plane.xyzw / abs(v1.zzzz);
	return;
}