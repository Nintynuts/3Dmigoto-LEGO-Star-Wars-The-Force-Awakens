// Level Collectibles Gold Brick

cbuffer g_CameraVS_CB : register(b0)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_MaterialVS_CB : register(b1)
{
	struct
	{
		float4 vs_layer0_diffuse;
		float4 vs_bitangentFlip;
		float4 vs_misc_params;
		float4 vs_vtf_kOffset_kHeight;
		float4 vs_ambientColor;
		float4 vs_fxAttributes;
		float4 vs_vtf_direction;
		float4 vs_UVMatrix01[4];
		float4 vs_UVMatrix23[4];
		float4 vs_bias;
	} g_MaterialVS : packoffset(c0);
}

cbuffer g_LightsVS_CB : register(b2)
{
	struct
	{
		float4 vs_SH_Ar;
		float4 vs_SH_Ag;
		float4 vs_SH_Ab;
		float4 vs_SH_Br;
		float4 vs_SH_Bg;
		float4 vs_SH_Bb;
		float4 vs_SH_C;
	} g_LightsVS : packoffset(c0);
}

cbuffer g_FogTexVS_CB : register(b3)
{
	struct
	{
		float4 vs_fog_tex_params;
	} g_FogTexVS : packoffset(c0);
}

cbuffer g_InstanceVS_CB : register(b4)
{
	struct
	{
		row_major float4x4 vs_world;
	} g_InstanceVS : packoffset(c0);
}

cbuffer g_MiscGroup1VS_Frequent_CB : register(b5)
{
	struct
	{
		float4 vs_lightmapOffset;
		float4 vs_kTint;
		float4 vs_defunct;
		float4 vs_fastBlendWeights;
	} g_MiscGroup1VS_Frequent : packoffset(c0);
}

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main(
	float4 v0 : POSITION0,
	float4 v1 : NORMAL0,
	float4 v2 : TANGENT0,
	float2 v3 : TEXCOORD0,
	out float4 o0 : SV_Position0,
	out float4 o1 : TEXCOORD0,
	out float4 o2 : TEXCOORD1,
	out float4 o3 : TEXCOORD2,
	out float4 o4 : TEXCOORD3,
	out float4 o5 : TEXCOORD4,
	out float2 o6 : TEXCOORD5,
	out float p6 : COLOR0)
{
	float4 r0,r1,r2,r3,r4,r5;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.xyz = g_InstanceVS.vs_world._m10_m11_m12 * v0.yyy;
	r0.xyz = v0.xxx * g_InstanceVS.vs_world._m00_m01_m02 + r0.xyz;
	r0.xyz = v0.zzz * g_InstanceVS.vs_world._m20_m21_m22 + r0.xyz;
	r0.xyz = g_InstanceVS.vs_world._m30_m31_m32 + r0.xyz;
	r1.xyzw = g_CameraVS.vs_viewProj._m10_m11_m12_m13 * r0.yyyy;
	r1.xyzw = r0.xxxx * g_CameraVS.vs_viewProj._m00_m01_m02_m03 + r1.xyzw;
	r1.xyzw = r0.zzzz * g_CameraVS.vs_viewProj._m20_m21_m22_m23 + r1.xyzw;
	o0.xyzw = g_CameraVS.vs_viewProj._m30_m31_m32_m33 + r1.xyzw;
	
	float4 tex_filter = IniParams.Load(int2(2,0));	
	if (tex_filter.y)
	{
		float4 stereo = StereoParams.Load(0);
		o0.x -= stereo.x * (o0.w - stereo.y);
		o0.x += stereo.x * (o0.w - 1);
	}
	
	r1.xyz = v1.xyz * float3(2.00787401,2.00787401,2.00787401) + float3(-1,-1,-1);
	r2.xyz = g_InstanceVS.vs_world._m10_m11_m12 * r1.yyy;
	r1.xyw = r1.xxx * g_InstanceVS.vs_world._m00_m01_m02 + r2.xyz;
	r1.xyz = r1.zzz * g_InstanceVS.vs_world._m20_m21_m22 + r1.xyw;
	r0.w = dot(r1.xyz, r1.xyz);
	r0.w = rsqrt(r0.w);
	r2.xyz = r1.xyz * r0.www;
	r2.w = 1;
	r3.x = dot(g_LightsVS.vs_SH_Ar.xyzw, r2.xyzw);
	r3.y = dot(g_LightsVS.vs_SH_Ag.xyzw, r2.xyzw);
	r3.z = dot(g_LightsVS.vs_SH_Ab.xyzw, r2.xyzw);
	r4.xyzw = r2.xyzz * r2.yzzx;
	r5.x = dot(g_LightsVS.vs_SH_Br.xyzw, r4.xyzw);
	r5.y = dot(g_LightsVS.vs_SH_Bg.xyzw, r4.xyzw);
	r5.z = dot(g_LightsVS.vs_SH_Bb.xyzw, r4.xyzw);
	r3.xyz = r5.xyz + r3.xyz;
	r0.w = r2.y * r2.y;
	r0.w = r2.x * r2.x + -r0.w;
	r2.xyz = g_LightsVS.vs_SH_C.xyz * r0.www + r3.xyz;
	o1.xyz = max(float3(0,0,0), r2.xyz);
	r2.xyz = -g_CameraVS.vs_worldCamPos.xyz + r0.xyz;
	r0.w = dot(r2.xyz, r2.xyz);
	r1.w = sqrt(r0.w);
	r0.w = rsqrt(r0.w);
	r2.xz = r2.xz * r0.ww;
	r0.w = g_FogTexVS.vs_fog_tex_params.z + r2.y;
	r0.w = log2(r0.w);
	o3.w = saturate(r0.w * g_FogTexVS.vs_fog_tex_params.w + g_FogTexVS.vs_fog_tex_params.y);
	r0.w = 1 + r1.w;
	r0.w = log2(r0.w);
	r0.w = 0.0752566829 * r0.w;
	o1.w = min(1, r0.w);
	r3.xyz = g_CameraVS.vs_view._m10_m11_m12 * r0.yyy;
	r3.xyz = r0.xxx * g_CameraVS.vs_view._m00_m01_m02 + r3.xyz;
	r0.xzw = r0.zzz * g_CameraVS.vs_view._m20_m21_m22 + r3.xyz;
	r0.y = saturate(-r0.y * g_FogTexVS.vs_fog_tex_params.x + 1);
	r2.xy = r2.xz * r0.yy;
	r2.xy = r2.xy * float2(0.5,0.5) + float2(0.5,0.5);
	o2.xyz = g_CameraVS.vs_view._m30_m31_m32 + r0.xzw;
	o2.w = r2.y;
	o4.w = r2.x;
	r0.xyz = g_CameraVS.vs_view._m10_m11_m12 * r1.yyy;
	r0.xyz = r1.xxx * g_CameraVS.vs_view._m00_m01_m02 + r0.xyz;
	r0.xyz = r1.zzz * g_CameraVS.vs_view._m20_m21_m22 + r0.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = rsqrt(r0.w);
	r0.xyz = r0.xyz * r0.www;
	r1.xyz = v2.xyz * float3(2,2,2) + float3(-1,-1,-1);
	r2.xyz = g_InstanceVS.vs_world._m10_m11_m12 * r1.yyy;
	r1.xyw = r1.xxx * g_InstanceVS.vs_world._m00_m01_m02 + r2.xyz;
	r1.xyz = r1.zzz * g_InstanceVS.vs_world._m20_m21_m22 + r1.xyw;
	r2.xyz = g_CameraVS.vs_view._m10_m11_m12 * r1.yyy;
	r1.xyw = r1.xxx * g_CameraVS.vs_view._m00_m01_m02 + r2.xyz;
	r1.xyz = r1.zzz * g_CameraVS.vs_view._m20_m21_m22 + r1.xyw;
	r0.w = dot(r1.xyz, r1.xyz);
	r0.w = rsqrt(r0.w);
	r1.xyz = r1.xyz * r0.www;
	r2.xyz = r1.zxy * r0.yzx;
	r2.xyz = r1.yzx * r0.zxy + -r2.xyz;
	o4.xyz = r0.xyz;
	o5.xyz = r1.xyz;
	o3.xyz = g_MaterialVS.vs_bitangentFlip.xxx * r2.xyz;
	p6.x = g_MiscGroup1VS_Frequent.vs_kTint.w * v1.w;
	r0.xy = v3.xy;
	r0.z = 1;
	o6.x = dot(r0.xyz, g_MaterialVS.vs_UVMatrix01[0].xyw);
	o6.y = dot(r0.xyz, g_MaterialVS.vs_UVMatrix01[1].xyw);
	return;
}
