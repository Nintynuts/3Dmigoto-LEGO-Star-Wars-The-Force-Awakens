// Lights Reflections

cbuffer g_CameraVS_CB : register(b13)
{
	struct
	{
		row_major float4x4 vs_viewProj;
		row_major float4x4 vs_view;
		float4 vs_worldCamPos;
		float4 vs_projection_params;
		float4 vs_inverse_projection_xy;
		float4 vs_frustum_params;
		float4 vs_inverse_projection2;
		float4 vs_cameraOrigin;
	} g_CameraVS : packoffset(c0);
}

cbuffer g_MaterialPS_CB : register(b0)
{
	struct
	{
		float4 fs_layer0_diffuse;
		float4 fs_layer1_diffuse;
		float4 fs_layer2_diffuse;
		float4 fs_layer3_diffuse;
		float4 fs_specular_specular;
		float4 fs_specular2_specular;
		float4 fs_specular_params;
		float4 fs_surface_params;
		float4 fs_surface_params2;
		float4 fs_incandescentGlow;
		float4 fs_rimLightColour;
		float4 fs_fresnel_params;
		float4 fs_ambientColor;
		float4 fs_envmap_params;
		float4 fs_diffenv_params;
		float4 fs_refraction_color;
		float4 fs_refraction_kIndex;
		float4 fs_lego_params;
		float4 fs_vtf_kNormal;
		float4 fs_carpaint_params;
		float4 fs_brdf_params;
		float4 fs_fractal_params;
		float4 fs_carpaint_tints0;
		float4 fs_carpaint_tints1;
		float4 fs_specular4_specular;
		float4 fs_perLayerUVScale;
		float4 fs_specular3_specular;
		float4 DEFUNCT_fs_lego_brdf_fudge;
	} g_MaterialPS : packoffset(c0);
}

cbuffer g_LightsPS_CB : register(b1)
{
	struct
	{
		float4 fs_lightColor0;
		float4 fs_lightColor1;
		float4 fs_lightDirection0;
		float4 fs_lightDirection1;
		float4 fs_ReflectionTintDesatFactor;
	} g_LightsPS : packoffset(c0);
}

cbuffer g_MiscGroupPS_CB : register(b2)
{
	struct
	{
		float4 fs_fog_color;
		float4 fs_liveCubemapReflectionPlane;
		float4 fs_viewMtx0;
		float4 fs_viewMtx1;
		float4 fs_viewMtx2;
		float4 fs_exposure;
		float4 fs_screenSize;
		float4 fs_time;
		float4 fs_exposure2;
		float4 fs_defunct_0;
		float4 fs_fog_tex_params;
		float4 fs_defunct_2;
		float4 fs_defunct_3;
		float4 fs_fog_params1;
		float4 fs_fog_params2;
		float4 fs_fog_params3;
		float4 fs_fog_params4;
		float4 fs_fog_params5;
	} g_MiscGroupPS : packoffset(c0);
}

SamplerState sceneEnvmap_samplerCube_ss_s : register(s3);
SamplerState layer0_sampler_ss_s : register(s4);
SamplerState surface_sampler_ss_s : register(s5);
TextureCube<float4> sceneEnvmap_samplerCube : register(t3);
Texture2D<float4> layer0_sampler : register(t4);
Texture2D<float4> surface_sampler : register(t5);

// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

void main( 
	float4 v0 : SV_Position0,
	float4 v1 : TEXCOORD0,
	float4 v2 : TEXCOORD1,
	float4 v3 : TEXCOORD2,
	float4 v4 : TEXCOORD3,
	float4 v5 : TEXCOORD4,
	float2 v6 : TEXCOORD5,
	float3 v7 : COLOR0,
	out float4 o0 : SV_Target0,
	out float4 o1 : SV_Target1,
	out float4 o2 : SV_Target2)
{
	float4 r0,r1,r2,r3,r4;
	uint4 bitmask, uiDest;
	float4 fDest;

	r0.x = dot(v5.xyz, v5.xyz);
	r0.x = rsqrt(r0.x);
	r0.xyz = v5.xyz * r0.xxx;
	r0.w = dot(v3.xyz, v3.xyz);
	r0.w = rsqrt(r0.w);
	r1.xyz = v3.xyz * r0.www;
	r2.xyz = surface_sampler.Sample(surface_sampler_ss_s, v6.xy).yzw;
		
	r2.xyz = r2.zxy * float3(2,2,2) + float3(-1,-1,-0);
	r2.xy = g_MaterialPS.fs_surface_params.xx * r2.xy;
	
	float4 stereo = StereoParams.Load(0);
	//r2.x -= stereo.x * (r2.z - stereo.y) * g_CameraVS.vs_inverse_projection_xy.x;
	
	r0.w = dot(r2.xyz, r2.xyz);
	r0.w = rsqrt(r0.w);
	r2.xyz = r2.xyz * r0.www;
	r1.xyz = r2.yyy * r1.xyz;
	r0.xyz = r0.xyz * r2.xxx + r1.xyz;
	r0.w = dot(v4.xyz, v4.xyz);
	r0.w = rsqrt(r0.w);
	r1.xyz = v4.xyz * r0.www;
	r0.xyz = r1.xyz * r2.zzz + r0.xyz;
	r0.w = dot(r0.xyz, r0.xyz);
	r0.w = rsqrt(r0.w);
	r0.xyz = r0.xyz * r0.www;
	r0.w = dot(-v2.xyz, -v2.xyz);
	r0.w = rsqrt(r0.w);
	r1.xyz = -v2.xyz * r0.www;
	r0.w = dot(r0.xyz, r1.xyz);
	r1.w = r0.w + r0.w;
	r0.w = saturate(r0.w);
	r1.xyz = r0.xyz * -r1.www + r1.xyz;
			
	r2.xyz = g_MiscGroupPS.fs_viewMtx1.xyz * -r1.yyy;	
		
	r2.xyz = -r1.xxx * g_MiscGroupPS.fs_viewMtx0.xyz + r2.xyz;
	r2.xyz = -r1.zzz * g_MiscGroupPS.fs_viewMtx2.xyz + r2.xyz;
	
	
	r1.w = 9 * g_MaterialPS.fs_specular_params.z;
	r2.xyz = sceneEnvmap_samplerCube.SampleLevel(sceneEnvmap_samplerCube_ss_s, r2.xyz, r1.w).xyz;
	r2.xyz = r2.xyz * r2.xyz;
	r2.xyz = g_LightsPS.fs_ReflectionTintDesatFactor.xyz * r2.xyz;
	r2.xyz = r2.xyz * r2.xyz;
	r1.w = 1 + -r0.w;
	r1.w = log2(r1.w);
	r1.w = 6.30000019 * r1.w;
	r1.w = exp2(r1.w);
	r2.w = 1 + -g_MaterialPS.fs_fresnel_params.y;
	r1.w = r2.w * r1.w;
	r0.w = r1.w * r0.w;
	r0.w = r0.w * 7.5 + g_MaterialPS.fs_fresnel_params.y;
	r1.w = -g_MaterialPS.fs_specular_params.z * 0.699999988 + 1;
	r2.w = r1.w * r0.w;
	r0.w = -r0.w * r1.w + 1;
	r3.xyz = layer0_sampler.Sample(layer0_sampler_ss_s, v6.xy).xyz;
	r1.w = dot(r3.xyz, float3(0.333000004,0.333000004,0.333000004));
	r3.xyz = g_MaterialPS.fs_layer0_diffuse.xyz * r3.xyz;
	r3.xyz = v7.xyz * r3.xyz;
	r3.xyz = r3.xyz * r3.xyz;
	r1.w = saturate(r1.w * r2.w);
	r2.xyz = r2.xyz * r1.www;
	r2.w = 1 + -g_MaterialPS.fs_brdf_params.y;
	r0.w = r2.w * r0.w + g_MaterialPS.fs_brdf_params.y;
	r2.xyz = r3.xyz * r0.www + r2.xyz;	
	
	r0.w = dot(-r1.xyz, g_LightsPS.fs_lightDirection1.xyz);
	r1.x = dot(-r1.xyz, g_LightsPS.fs_lightDirection0.xyz);
	r1.x = max(1.00000001e-007, r1.x);
	r1.x = log2(r1.x);
	r1.x = g_MaterialPS.fs_specular_params.x * r1.x;
	r1.x = exp2(r1.x);
	r1.x = g_MaterialPS.fs_specular_params.w * r1.x;
	r0.w = max(1.00000001e-007, r0.w);
	r0.w = log2(r0.w);
	r0.w = g_MaterialPS.fs_specular_params.x * r0.w;
	r0.w = exp2(r0.w);
	r0.w = g_MaterialPS.fs_specular_params.w * r0.w;

	r1.y = saturate(dot(g_LightsPS.fs_lightDirection1.xyz, r0.xyz));
	r1.z = g_LightsPS.fs_ReflectionTintDesatFactor.w * r1.y;

	r0.w = r1.z * r0.w;
	r3.xyz = g_LightsPS.fs_lightColor1.xyz * r0.www;

	r0.w = saturate(dot(g_LightsPS.fs_lightDirection0.xyz, r0.xyz));
	r1.z = g_LightsPS.fs_ReflectionTintDesatFactor.w * r0.w;
	r4.xyz = g_LightsPS.fs_lightColor0.xyz * r0.www + v1.xyz;
	r4.xyz = g_LightsPS.fs_lightColor1.xyz * r1.yyy + r4.xyz;
	r0.w = r1.x * r1.z;
	r1.xyz = g_LightsPS.fs_lightColor0.xyz * r0.www + r3.xyz;
	r1.xyz = r1.www * r1.xyz;
	o1.z = r1.w;
	r1.xyz = r2.xyz * r4.xyz + r1.xyz;
	o2.xyz = sqrt(r2.xyz);
	r1.xyz = g_MiscGroupPS.fs_exposure.yyy * r1.xyz;
	r0.w = max(r1.x, r1.y);
	r0.w = max(r0.w, r1.z);
	r0.w = max(9.99999975e-006, r0.w);
	r0.w = sqrt(r0.w);
	r0.w = 45.0780563 * r0.w;
	r0.w = ceil(r0.w);
	r1.w = 0.0221837424 * r0.w;
	o0.w = 0.00392156886 * r0.w;
	r0.w = r1.w * r1.w;
	o0.xyz = r1.xyz / r0.www;
	r1.xy = min(float2(1,1), abs(r0.xy));
	r1.xy = float2(1,1) + -r1.xy;
	r1.xy = max(float2(1.53787005e-005,1.53787005e-005), r1.xy);
	r1.xy = sqrt(r1.xy);
	r0.xy = cmp(r0.xy >= float2(0,0));
	r0.z = cmp(0 < r0.z);
	o2.w = r0.z ? 0.752941191 : 0.501960814;
	r0.xy = r0.xy ? float2(1,1) : float2(-1,-1);
	r0.xy = r0.xy * r1.xy;
	o1.xy = r0.xy * float2(0.5,0.5) + float2(0.5,0.5);
	o1.w = g_MaterialPS.fs_specular_params.z;
	
	//o1 = 0;
	
	return;
}
